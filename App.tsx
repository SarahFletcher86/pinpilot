import React, { useEffect, useMemo, useRef, useState } from "react";
import "./index.css";
import BrandingControls from "./components/BrandingControls";
import DesignPreview, { DesignPreviewRef } from "./components/DesignPreview";
import { generatePinContent } from "./services/geminiService";

type BrandingOptions = {
  overlayText: string;
  colors: { text: string; accent: string };
  font: string;
  logoDataUrl: string | null; // user logo (data URL)
  includeLogo: boolean;       // toggle
  template: "standard" | "bottomBar";
};

type PinData = {
  title: string;
  description: string;
  tags: string[];
};

const initialBranding: BrandingOptions = {
  overlayText: "Your Catchy Title Here",
  colors: { text: "#111827", accent: "#2dd4bf" }, // dark slate / aqua
  font: "Poppins",
  logoDataUrl: null,
  includeLogo: true,
  template: "bottomBar",
};

const App: React.FC = () => {
  const isPro = new URLSearchParams(window.location.search).get("pro") === "1";

  // media
  const [baseImage, setBaseImage] = useState<string | null>(null); // dataURL
  const [designedImage, setDesignedImage] = useState<string | null>(null); // dataURL produced by preview
  // ui + branding
  const [branding, setBranding] = useState<BrandingOptions>(() => {
    try {
      const saved = localStorage.getItem("brandingOptions");
      if (saved) return JSON.parse(saved) as BrandingOptions;
    } catch {}
    return initialBranding;
  });
  const [busy, setBusy] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // AI results
  const [ai, setAI] = useState<PinData | null>(null);

  // preview ref (for downloading)
  const previewRef = useRef<DesignPreviewRef>(null);

  // persist branding
  useEffect(() => {
    localStorage.setItem("brandingOptions", JSON.stringify(branding));
  }, [branding]);

  // when preview renders a new composite, capture it for posting/downloading
  const handleComposite = (pngDataUrl: string) => setDesignedImage(pngDataUrl);

  // file select (image or mp4 poster frame is out-of-scope here; image only)
  const onPickImage = async (file: File | undefined) => {
    if (!file) return;
    if (!file.type.startsWith("image/")) {
      setError("Please upload a PNG or JPG image.");
      return;
    }
    setError(null);
    const reader = new FileReader();
    reader.onload = () => setBaseImage(reader.result as string);
    reader.readAsDataURL(file);
  };

  const canGenerate = useMemo(
    () => Boolean(baseImage) && !busy,
    [baseImage, busy]
  );

  const runGenerate = async () => {
    if (!designedImage) {
      setError("Please finalize your design first.");
      return;
    }
    setBusy(true);
    setError(null);
    setAI(null);

    try {
      // send *final* designed image to Gemini so it can see colors/logo/text
      const base64 = designedImage.split(",")[1]; // dataURL -> base64
      const result = await generatePinContent(base64, "image/png", "");
      // normalize
      const normalized: PinData = {
        title: result.title ?? "Your Pin Title",
        description: result.description ?? "Pin description generated by AI",
        tags: Array.isArray(result.keywords)
          ? (result.keywords as string[])
          : [],
      };
      setAI(normalized);
    } catch (e: any) {
      // show helpful quota/billing hint
      const msg =
        typeof e?.message === "string" && e.message.includes("429")
          ? `Gemini quota reached on this API key. Add a paid key in Vercel env (GEMINI_API_KEY) or try again later.`
          : e?.message || "Failed to generate content.";
      setError(msg);
    } finally {
      setBusy(false);
    }
  };

  const downloadPNG = () => {
    previewRef.current?.download();
  };

  const resetAll = () => {
    setBaseImage(null);
    setDesignedImage(null);
    setAI(null);
    setError(null);
  };

  return (
    <div className="pp-wrap">
      <header className="pp-header">
        <div className="pp-brand">
          <img src="/logo.png" alt="Pin Pilot" />
          <div className="pp-title" style={{ display: "none" }}>
            Pin Pilot
          </div>
        </div>
        <div className="pp-tagline">Pin better. Grow faster.</div>
      </header>

      <main className="pp-main">
        {/* Left: controls */}
        <section className="pp-card">
          <div className="pp-card-head">
            <div className="pp-step">1</div>
            <h3>Upload & Brand</h3>
          </div>

          {/* Uploader */}
          <label className="pp-input-file">
            <input
              type="file"
              accept="image/*"
              onChange={(e) => onPickImage(e.currentTarget.files?.[0])}
            />
            <span>Click to upload or drag and drop</span>
          </label>

          {/* Branding controls */}
          <BrandingControls value={branding} onChange={setBranding} />

          <div className="pp-row">
            <button
              className="pp-btn"
              disabled={!canGenerate}
              onClick={runGenerate}
            >
              {busy ? "Generating…" : "Generate Pin Content"}
            </button>
            <button className="pp-btn ghost" onClick={resetAll}>
              Reset
            </button>
            <button
              className="pp-btn ghost"
              onClick={() => (window.location.href = "?pro=1")}
              title="Simulate Pro for testing"
            >
              Test Pro
            </button>
          </div>

          {!!error && <div className="pp-error">{error}</div>}
        </section>

        {/* Right: preview + AI fields */}
        <section className="pp-card">
          <div className="pp-card-head">
            <div className="pp-step">2</div>
            <h3>Preview & Content</h3>
          </div>

          <DesignPreview
            ref={previewRef}
            baseImage={baseImage}
            branding={branding}
            onComposite={handleComposite}
          />

          {/* AI fields */}
          <div className="pp-fields">
            <label>
              Title
              <input
                type="text"
                value={ai?.title ?? ""}
                onChange={(e) =>
                  setAI((p) => ({ ...(p || { title: "", description: "", tags: [] }), title: e.target.value }))
                }
                placeholder="Your Pin Title"
              />
            </label>
            <label>
              Description
              <textarea
                rows={4}
                value={ai?.description ?? ""}
                onChange={(e) =>
                  setAI((p) => ({
                    ...(p || { title: "", description: "", tags: [] }),
                    description: e.target.value,
                  }))
                }
                placeholder="Pin description generated by AI"
              />
            </label>
            <label>
              Keywords / Tags (comma separated)
              <input
                type="text"
                value={(ai?.tags ?? []).join(", ")}
                onChange={(e) =>
                  setAI((p) => ({
                    ...(p || { title: "", description: "", tags: [] }),
                    tags: e.target.value
                      .split(",")
                      .map((s) => s.trim())
                      .filter(Boolean),
                  }))
                }
                placeholder="e.g. home decor, small business, brand colors"
              />
            </label>
          </div>

          <div className="pp-row">
            <button className="pp-btn" disabled={!designedImage} onClick={downloadPNG}>
              Download Branded Image
            </button>
            {!isPro && (
              <div className="pp-note">
                Pinterest connect & scheduling are Pro features. Add <code>?pro=1</code> to your URL while testing.
              </div>
            )}
          </div>
        </section>
      </main>

      <footer className="pp-footer">
        <div className="pp-actions">
          <button
            className="pp-link"
            onClick={() => alert("Quick tips:\n• Upload a clear product image\n• Use the toggle to include your logo\n• Pick two brand hex colors")}
          >
            Help
          </button>
          <button className="pp-link" onClick={() => resetAll()}>
            Start Over
          </button>
        </div>
      </footer>
    </div>
  );
};

export default App;