// services/geminiService.ts
import { GoogleGenerativeAI } from "@google/generative-ai";
import type { PinData } from "../types";

const apiKey = import.meta.env.VITE_GEMINI_API_KEY || (window as any).GEMINI_API_KEY;
if (!apiKey) {
  throw new Error("Missing Gemini API key. Set VITE_GEMINI_API_KEY in Vercel env.");
}

const genAI = new GoogleGenerativeAI(apiKey);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

export async function generatePinContent(
  base64Image: string,
  mimeType: string,
  boardHints: string
): Promise<PinData> {
  const prompt = `
You are helping create a high-performing Pinterest pin.
Return JSON with fields: title, description, tags (array of 5-10 tags).
Boards/context: ${boardHints}
Keep the title under 90 chars, description under 400.
  `;

  const result = await model.generateContent([
    {
      inlineData: { data: base64Image, mimeType }
    },
    { text: prompt }
  ]);

  const text = result.response.text();
  try {
    const parsed = JSON.parse(text);
    return {
      title: parsed.title || "Your Pin Title",
      description: parsed.description || "Pin description",
      tags: Array.isArray(parsed.tags) ? parsed.tags : []
    };
  } catch {
    return {
      title: "Your Pin Title",
      description: "Pin description generated by AI",
      tags: []
    };
  }
}